<?xml version="1.0" encoding="UTF-8" standalone="no"?><mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="   http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd   http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd   http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="json-test-suite.xml"/>
	<munit:test description="Test" doc:id="ccd7132c-6185-4071-8931-a8251ee0140d" name="payloadJSONExpectedSuccessTestCase">
		<munit:execution>
			<flow-ref doc:id="6b72517f-7285-4cc2-8701-660d2d176c5f" doc:name="Flow-ref to getJSONObject" name="getJSONObject"/>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert-that doc:name="Assert that - payload is expected" doc:id="07c45467-62a3-4b3e-aad4-d5f895d6b778" message='#["The reponse payload is not valid"]' expression="#[payload]" is="#[MunitTools::equalTo(readUrl('classpath://payloadResponse.json','application/json'))]"/>
		</munit:validation>
	</munit:test>
	<munit:test name="categoryMatchSuccessTestCase" doc:id="8d099904-838d-4e95-807c-30a878436917" >
		<munit:behavior >
			<set-variable value="#[['obstetric', 'pediatrician','dermatology','gynaecology'] as Array]" doc:name="Set Variable - medical categories" doc:id="22a764e5-a591-4a56-85c5-e8f3d681b024" variableName="medicalCategories"/>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to getJSONObject" doc:id="98bb6b48-1c15-4fc3-801b-dc0a260cdeee" name="getJSONObject"/>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert expression" doc:id="b6c9dd3c-2f2a-4d73-b29e-f78fcc468218" message='#["The medical category in the payload does not exist"]'>
				<munit-tools:that ><![CDATA[#[import * from dw::test::Asserts 
 ---
payload.category must beOneOf(vars.medicalCategories)]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="feeValueSuccessTestCase" doc:id="94954bac-4e51-4535-ab18-94dbc56b761b" >
		<munit:execution >
			<flow-ref doc:name="Flow-ref to getJSONObject" doc:id="bc86c729-76f5-445b-b246-79257a7e9e54" name="getJSONObject"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-that doc:name="Assert that - fee exists and is greater than or equal to 100" doc:id="b83d2eb3-8389-4000-9061-c58566800f72" is="#[MunitTools::both(MunitTools::notNullValue(), MunitTools::greaterThanOrEqualTo(100))]" message='#["The medical fee is not valid"]' expression="#[payload.fee]"/>
		</munit:validation>
	</munit:test>
	<munit:test name="payloadMediaTypeSuccessTestCase" doc:id="0ec0b104-c63d-4392-91ed-1233f43b9d7a" >
		<munit:execution >
			<flow-ref doc:name="Flow-ref to getJSONObject" doc:id="155e7a22-96df-4a7f-beb2-fd34ed44ae5c" name="getJSONObject"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-that doc:name="Assert that - payload media type is JSON" doc:id="3a7d4d9d-3e3d-4192-9ac7-db4d0ca84f18" message='#["The media type of the response is not valid"]' expression="#[payload]" is="#[MunitTools::withMediaType('application/json')]"/>
		</munit:validation>
	</munit:test>

</mule>